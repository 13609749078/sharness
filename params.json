{"name":"Sharness","tagline":"Shell library to test your Unix tools like Git does","body":"Sharness\r\n========\r\n\r\nSharness is a portable shell library to write, run, and analyze automated tests\r\nfor Unix programs. Since all tests output TAP, the [Test Anything Protocol],\r\nthey can be run with any TAP harness.\r\n\r\nEach test is written as a shell script, for example:\r\n\r\n```sh\r\n#!/bin/sh\r\n\r\ntest_description=\"Show basic features of Sharness\"\r\n\r\n. ./sharness.sh\r\n\r\ntest_expect_success \"Success is reported like this\" \"\r\n    echo hello world | grep hello\r\n\"\r\n\r\ntest_expect_success \"Commands are chained this way\" \"\r\n    test x = 'x' &&\r\n    test 2 -gt 1 &&\r\n    echo success\r\n\"\r\n\r\nreturn_42() {\r\n    echo \"Will return soon\"\r\n    return 42\r\n}\r\n\r\ntest_expect_success \"You can test for a specific exit code\" \"\r\n    test_expect_code 42 return_42\r\n\"\r\n\r\ntest_expect_failure \"We expect this to fail\" \"\r\n    test 1 = 2\r\n\"\r\n\r\ntest_done\r\n```\r\n\r\nRunning the above test script returns the following (TAP) output:\r\n\r\n    $ ./simple.t\r\n    ok 1 - Success is reported like this\r\n    ok 2 - Commands are chained this way\r\n    ok 3 - You can test for a specific exit code\r\n    not ok 4 - We expect this to fail # TODO known breakage\r\n    # still have 1 known breakage(s)\r\n    # passed all remaining 3 test(s)\r\n    1..4\r\n\r\nAlternatively, you can run the test through [prove(1)]:\r\n\r\n    $ prove simple.t\r\n    simple.t .. ok\r\n    All tests successful.\r\n    Files=1, Tests=4,  0 wallclock secs ( 0.02 usr +  0.00 sys =  0.02 CPU)\r\n    Result: PASS\r\n\r\nSharness was derived from the [Git] project - see [README.git] for the original\r\ndocumentation.\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nFirst, clone the Git repository:\r\n\r\n    $ git clone git://github.com/mlafeldt/sharness.git\r\n\r\nThen choose an installation method that works best for you:\r\n\r\n### Per-project installation\r\n\r\nIf you like to add Sharness to the sources of a project you want to use it for,\r\nsimply copy the files `sharness.sh`, `aggregate-results.sh`, and `test/Makefile`\r\nto a folder named `test` inside that project.\r\n\r\nAlternatively, you can also add Sharness as a Git submodule to your project.\r\n\r\n### Per-user installation\r\n\r\n    $ cd sharness\r\n    $ make install\r\n\r\nThis will install Sharness to `$HOME/share/sharness`, and its documentation and\r\nexamples to `$HOME/share/doc/sharness`.\r\n\r\n### System-wide installation\r\n\r\n    $ cd sharness\r\n    # make install prefix=/usr/local\r\n\r\nThis will install Sharness to `/usr/local/share/sharness`, and its documentation\r\nand examples to `/usr/local/share/doc/sharness`.\r\n\r\nOf course, you can change the _prefix_ parameter to install Sharness to any\r\nother location.\r\n\r\n### Installation via Chef\r\n\r\nIf you want to install Sharness with Opscode Chef, the [Sharness cookbook] is\r\nfor you.\r\n\r\n\r\nUsage\r\n-----\r\n\r\nThe following files are essential to using Sharness:\r\n\r\n* `sharness.sh` - core shell library providing test functionality, see separate\r\n   [API documentation]\r\n* `aggregate-results.sh` - helper script to aggregate test results\r\n* `test/Makefile` - test driver\r\n\r\nTo learn how to write and run actual test scripts based on `sharness.sh`, please\r\nread [README.git] until I come up with more documentation myself.\r\n\r\n\r\nProjects using Sharness\r\n-----------------------\r\n\r\nSee how Sharness is used in real-world projects:\r\n\r\n* [cb2util](https://github.com/mlafeldt/cb2util/tree/master/test)\r\n* [dabba](https://github.com/eroullit/dabba)\r\n* [git-integration](https://github.com/johnkeeping/git-integration/tree/master/t)\r\n* [rdd.py](https://github.com/mlafeldt/rdd.py/tree/master/test/integration)\r\n* [timedb](http://git.cryptoism.org/cgit.cgi/timedb.git)\r\n* [tomdoc.sh](https://github.com/mlafeldt/tomdoc.sh/tree/master/test)\r\n* [Sharness itself](https://github.com/mlafeldt/sharness/blob/master/test)\r\n\r\nFurthermore, as Sharness was derived from Git, [Git's test suite](https://github.com/git/git/tree/master/t)\r\nis worth examining as well, especially if you're interested in managing a big\r\nnumber of tests.\r\n\r\n\r\nAlternatives\r\n------------\r\n\r\nHere is a list of other shell testing libraries (sorted alphabetically):\r\n\r\n* [Bats](https://github.com/sstephenson/bats)\r\n* [Cram](https://bitheap.org/cram)\r\n* [rnt](https://github.com/roman-neuhauser/rnt)\r\n* [roundup](https://github.com/bmizerany/roundup)\r\n* [shUnit2](https://code.google.com/p/shunit2/)\r\n* [shspec](https://github.com/shpec/shpec)\r\n* [testlib.sh](https://gist.github.com/3877539)\r\n* [ts](https://github.com/thinkerbot/ts)\r\n\r\nLicense\r\n-------\r\n\r\nSharness is licensed under the terms of the GNU General Public License version\r\n2 or higher. See file [COPYING] for full license text.\r\n\r\n\r\nContact\r\n-------\r\n\r\n* Web: <http://mlafeldt.github.com/sharness>\r\n* Mail: <mathias.lafeldt@gmail.com>\r\n* Twitter: [@mlafeldt](https://twitter.com/mlafeldt)\r\n\r\n\r\n[API documentation]: https://github.com/mlafeldt/sharness/blob/master/API.md\r\n[COPYING]: https://github.com/mlafeldt/sharness/blob/master/COPYING\r\n[Git]: http://git-scm.com/\r\n[README.git]: https://github.com/mlafeldt/sharness/blob/master/README.git\r\n[Sharness cookbook]: https://github.com/mlafeldt/sharness-cookbook\r\n[Test Anything Protocol]: http://testanything.org/\r\n[prove(1)]: http://linux.die.net/man/1/prove\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}